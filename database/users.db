-- users.db - User management and session handling for research platform

-- Main users table
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE,
    email TEXT UNIQUE,
    password_hash TEXT, -- For registered users
    full_name TEXT,
    institution TEXT,
    department TEXT,
    research_area TEXT,
    academic_level TEXT, -- 'undergraduate', 'graduate', 'postdoc', 'faculty', 'researcher'
    country TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    is_verified BOOLEAN DEFAULT FALSE,
    verification_token TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Anonymous sessions for users who don't register
CREATE TABLE sessions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    session_id TEXT UNIQUE NOT NULL,
    user_id INTEGER, -- NULL for anonymous sessions
    ip_address TEXT,
    user_agent TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- User preferences and settings
CREATE TABLE user_preferences (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    session_id TEXT, -- For anonymous users
    preferred_language TEXT DEFAULT 'American English', -- 'American English', 'British English', 'International English'
    default_publication_type TEXT DEFAULT 'journal', -- 'journal', 'conference', 'thesis'
    preferred_citation_style TEXT DEFAULT 'APA',
    auto_save BOOLEAN DEFAULT TRUE,
    email_notifications BOOLEAN DEFAULT FALSE,
    theme TEXT DEFAULT 'light', -- 'light', 'dark'
    timezone TEXT DEFAULT 'UTC',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- User upload history
CREATE TABLE upload_history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    session_id TEXT,
    file_type TEXT NOT NULL, -- 'research_paper', 'figure', 'protocol', 'reference'
    original_filename TEXT NOT NULL,
    file_size_mb REAL,
    feature_used TEXT, -- 'explain_rewrite', 'figure_fixer', 'protocol_optimizer', etc.
    upload_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processing_status TEXT DEFAULT 'uploaded', -- 'uploaded', 'processing', 'completed', 'failed'
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- User activity log
CREATE TABLE user_activity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    session_id TEXT,
    activity_type TEXT NOT NULL, -- 'login', 'upload', 'process', 'download', 'rewrite', 'analyze'
    feature_used TEXT, -- Which feature was used
    details TEXT, -- JSON of additional details
    ip_address TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- User saved templates/preferences per feature
CREATE TABLE saved_templates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    template_name TEXT NOT NULL,
    feature_type TEXT NOT NULL, -- 'explain_rewrite', 'figure_fixer', 'custom_requirements'
    template_data TEXT NOT NULL, -- JSON of saved settings
    is_default BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- User feedback and ratings
CREATE TABLE user_feedback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    session_id TEXT,
    feature_used TEXT NOT NULL,
    rating INTEGER CHECK(rating >= 1 AND rating <= 5),
    feedback_text TEXT,
    improvement_suggestions TEXT,
    would_recommend BOOLEAN,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Usage statistics per user
CREATE TABLE user_usage_stats (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    session_id TEXT,
    date DATE NOT NULL,
    feature_explain_rewrite INTEGER DEFAULT 0,
    feature_protocol_optimizer INTEGER DEFAULT 0,
    feature_figure_fixer INTEGER DEFAULT 0,
    feature_citation_context INTEGER DEFAULT 0,
    feature_idea_recombinator INTEGER DEFAULT 0,
    feature_contradiction_detector INTEGER DEFAULT 0,
    total_uploads INTEGER DEFAULT 0,
    total_processing_time_seconds INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    UNIQUE(user_id, date),
    UNIQUE(session_id, date)
);

-- Password reset tokens
CREATE TABLE password_reset_tokens (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    token TEXT UNIQUE NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    used BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- User subscription/usage limits (for future premium features)
CREATE TABLE user_limits (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    session_id TEXT,
    account_type TEXT DEFAULT 'free', -- 'free', 'premium', 'institutional'
    monthly_uploads_limit INTEGER DEFAULT 50,
    monthly_uploads_used INTEGER DEFAULT 0,
    monthly_processing_limit INTEGER DEFAULT 100, -- number of AI processing requests
    monthly_processing_used INTEGER DEFAULT 0,
    storage_limit_mb INTEGER DEFAULT 500,
    storage_used_mb REAL DEFAULT 0,
    reset_date DATE, -- When monthly limits reset
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Insert default preferences for common settings
INSERT INTO user_preferences (user_id, session_id, preferred_language, default_publication_type, preferred_citation_style) VALUES
-- These will be default templates for new users
(NULL, NULL, 'American English', 'journal', 'APA'),
(NULL, NULL, 'British English', 'journal', 'Nature format'),
(NULL, NULL, 'International English', 'conference', 'IEEE format');

-- Create indexes for better performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_sessions_session_id ON sessions(session_id);
CREATE INDEX idx_sessions_user_id ON sessions(user_id);
CREATE INDEX idx_user_prefs_user ON user_preferences(user_id);
CREATE INDEX idx_user_prefs_session ON user_preferences(session_id);
CREATE INDEX idx_upload_history_user ON upload_history(user_id);
CREATE INDEX idx_upload_history_session ON upload_history(session_id);
CREATE INDEX idx_activity_user ON user_activity(user_id);
CREATE INDEX idx_activity_session ON user_activity(session_id);
CREATE INDEX idx_activity_type ON user_activity(activity_type);
CREATE INDEX idx_saved_templates_user ON saved_templates(user_id);
CREATE INDEX idx_feedback_user ON user_feedback(user_id);
CREATE INDEX idx_usage_stats_user_date ON user_usage_stats(user_id, date);
CREATE INDEX idx_usage_stats_session_date ON user_usage_stats(session_id, date);
CREATE INDEX idx_reset_tokens_token ON password_reset_tokens(token);
CREATE INDEX idx_user_limits_user ON user_limits(user_id);
CREATE INDEX idx_user_limits_session ON user_limits(session_id);

-- Create triggers to automatically update timestamps
CREATE TRIGGER update_users_timestamp 
    AFTER UPDATE ON users
    FOR EACH ROW
    BEGIN
        UPDATE users SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER update_preferences_timestamp 
    AFTER UPDATE ON user_preferences
    FOR EACH ROW
    BEGIN
        UPDATE user_preferences SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER update_templates_timestamp 
    AFTER UPDATE ON saved_templates
    FOR EACH ROW
    BEGIN
        UPDATE saved_templates SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER update_limits_timestamp 
    AFTER UPDATE ON user_limits
    FOR EACH ROW
    BEGIN
        UPDATE user_limits SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;
